/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import {
  PtrCallback,
} from './components/pointer-events/pointer-events';

declare global {
  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;
  }
}



import {
  Code as ProCode
} from './components/code/code';

declare global {
  interface HTMLProCodeElement extends ProCode, HTMLStencilElement {
  }
  var HTMLProCodeElement: {
    prototype: HTMLProCodeElement;
    new (): HTMLProCodeElement;
  };
  interface HTMLElementTagNameMap {
    "pro-code": HTMLProCodeElement;
  }
  interface ElementTagNameMap {
    "pro-code": HTMLProCodeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "pro-code": JSXElements.ProCodeAttributes;
    }
  }
  namespace JSXElements {
    export interface ProCodeAttributes extends HTMLAttributes {
      code?: string;
      lang?: string;
    }
  }
}


import {
  GLShader as ProGlshader
} from './components/glshader/glshader';

declare global {
  interface HTMLProGlshaderElement extends ProGlshader, HTMLStencilElement {
  }
  var HTMLProGlshaderElement: {
    prototype: HTMLProGlshaderElement;
    new (): HTMLProGlshaderElement;
  };
  interface HTMLElementTagNameMap {
    "pro-glshader": HTMLProGlshaderElement;
  }
  interface ElementTagNameMap {
    "pro-glshader": HTMLProGlshaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "pro-glshader": JSXElements.ProGlshaderAttributes;
    }
  }
  namespace JSXElements {
    export interface ProGlshaderAttributes extends HTMLAttributes {
      frag?: string;
      media?: string;
      ready?: boolean;
      retina?: boolean;
      uniforms?: any;
      vert?: string;
    }
  }
}


import {
  Img as ProImg
} from './components/img/img';

declare global {
  interface HTMLProImgElement extends ProImg, HTMLStencilElement {
  }
  var HTMLProImgElement: {
    prototype: HTMLProImgElement;
    new (): HTMLProImgElement;
  };
  interface HTMLElementTagNameMap {
    "pro-img": HTMLProImgElement;
  }
  interface ElementTagNameMap {
    "pro-img": HTMLProImgElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "pro-img": JSXElements.ProImgAttributes;
    }
  }
  namespace JSXElements {
    export interface ProImgAttributes extends HTMLAttributes {
      alt?: string;
      fit?: boolean;
      src?: string;
    }
  }
}


import {
  Lazy as ProLazy
} from './components/lazy/lazy';

declare global {
  interface HTMLProLazyElement extends ProLazy, HTMLStencilElement {
  }
  var HTMLProLazyElement: {
    prototype: HTMLProLazyElement;
    new (): HTMLProLazyElement;
  };
  interface HTMLElementTagNameMap {
    "pro-lazy": HTMLProLazyElement;
  }
  interface ElementTagNameMap {
    "pro-lazy": HTMLProLazyElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "pro-lazy": JSXElements.ProLazyAttributes;
    }
  }
  namespace JSXElements {
    export interface ProLazyAttributes extends HTMLAttributes {
      component?: string;
      props?: {[key: string]: any};
    }
  }
}


import {
  ProMap as ProMap
} from './components/map/pro-map';

declare global {
  interface HTMLProMapElement extends ProMap, HTMLStencilElement {
  }
  var HTMLProMapElement: {
    prototype: HTMLProMapElement;
    new (): HTMLProMapElement;
  };
  interface HTMLElementTagNameMap {
    "pro-map": HTMLProMapElement;
  }
  interface ElementTagNameMap {
    "pro-map": HTMLProMapElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "pro-map": JSXElements.ProMapAttributes;
    }
  }
  namespace JSXElements {
    export interface ProMapAttributes extends HTMLAttributes {
      apikey?: string;
      center?: any;
      disableDefaultUI?: boolean;
      fullscreenControl?: boolean;
      lat?: any;
      lng?: number;
      mapTypeControl?: boolean;
      mapTypeId?: 'roadmap'|'satellite'|'hybrid'|'terrain';
      rotateControl?: boolean;
      scaleControl?: boolean;
      streetViewControl?: boolean;
      zoom?: number;
      zoomControl?: boolean;
    }
  }
}


import {
  Markdown as ProMarkdown
} from './components/markdown/markdown';

declare global {
  interface HTMLProMarkdownElement extends ProMarkdown, HTMLStencilElement {
  }
  var HTMLProMarkdownElement: {
    prototype: HTMLProMarkdownElement;
    new (): HTMLProMarkdownElement;
  };
  interface HTMLElementTagNameMap {
    "pro-markdown": HTMLProMarkdownElement;
  }
  interface ElementTagNameMap {
    "pro-markdown": HTMLProMarkdownElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "pro-markdown": JSXElements.ProMarkdownAttributes;
    }
  }
  namespace JSXElements {
    export interface ProMarkdownAttributes extends HTMLAttributes {
      content?: string;
    }
  }
}


import {
  Payment as ProPayment
} from './components/payment/payment';

declare global {
  interface HTMLProPaymentElement extends ProPayment, HTMLStencilElement {
  }
  var HTMLProPaymentElement: {
    prototype: HTMLProPaymentElement;
    new (): HTMLProPaymentElement;
  };
  interface HTMLElementTagNameMap {
    "pro-payment": HTMLProPaymentElement;
  }
  interface ElementTagNameMap {
    "pro-payment": HTMLProPaymentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "pro-payment": JSXElements.ProPaymentAttributes;
    }
  }
  namespace JSXElements {
    export interface ProPaymentAttributes extends HTMLAttributes {
      details?: PaymentDetails;
      methodData?: PaymentMethodData[];
      options?: PaymentOptions;
    }
  }
}


import {
  PointerEvents as ProPointerEvents
} from './components/pointer-events/pointer-events';

declare global {
  interface HTMLProPointerEventsElement extends ProPointerEvents, HTMLStencilElement {
  }
  var HTMLProPointerEventsElement: {
    prototype: HTMLProPointerEventsElement;
    new (): HTMLProPointerEventsElement;
  };
  interface HTMLElementTagNameMap {
    "pro-pointer-events": HTMLProPointerEventsElement;
  }
  interface ElementTagNameMap {
    "pro-pointer-events": HTMLProPointerEventsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "pro-pointer-events": JSXElements.ProPointerEventsAttributes;
    }
  }
  namespace JSXElements {
    export interface ProPointerEventsAttributes extends HTMLAttributes {
      attachTo?: any;
      autoBlockAll?: boolean;
      disabled?: boolean;
      onEnd?: PtrCallback;
      onMove?: PtrCallback;
      onStart?: PtrCallback;
      passive?: boolean;
    }
  }
}


import {
  Speech as ProSpeech
} from './components/speech/speech';

declare global {
  interface HTMLProSpeechElement extends ProSpeech, HTMLStencilElement {
  }
  var HTMLProSpeechElement: {
    prototype: HTMLProSpeechElement;
    new (): HTMLProSpeechElement;
  };
  interface HTMLElementTagNameMap {
    "pro-speech": HTMLProSpeechElement;
  }
  interface ElementTagNameMap {
    "pro-speech": HTMLProSpeechElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "pro-speech": JSXElements.ProSpeechAttributes;
    }
  }
  namespace JSXElements {
    export interface ProSpeechAttributes extends HTMLAttributes {
      continuous?: boolean;
      enabled?: boolean;
      lang?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
